    #version 430 core
    vec3 seed=vec3(10,10,10);
    layout( std430, binding=1 ) buffer VertBuffer
      {
      vec4 Positions[ ]; 
      };
    layout(std430, binding = 2) buffer NormalBuffer
        {
         vec4 Normals[];
        };

    layout(std430, binding = 3) buffer CounterBuffer
    {
     uint Counter;
    };
    layout(std430, binding = 4) buffer SizeBuffer
    {
     int Size;
    };
    layout( local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
    
    layout (rgba32f)  uniform image2D HeightMap;


/*
    float rand(vec2 co)
    { vec2 seed=vec2(1876,100);
        co+=seed;
        float wsp=10;
        return wsp*fract(sin(dot(co.xy ,vec2(52.9898,12.233))) * 43758.5453)*((Size/512));
    }*/
    //  Simplex 3D Noise 
//  by Ian McEwan, Ashima Arts
//

vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float rand(vec2 vI){ 
  //  v*=noiseData.x;
   // return 0;
    float wsp=10, wsp1=10;;

  //  vec3 seed=vec3(10,20,30);
    vec3 v= vec3(vI.x, vI.y, 1)+seed;
    float amp=0.1;
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  float returnValue=0;//,wsp1=1;

  //returnValue=wsp1*length(v-vec3(0,0,0));
  return  /*returnValue+noiseData.y*/clamp(wsp*(42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) )),(-1*(wsp1*Size/512)), (1*wsp1*Size/512) );
}
    void main (void)
    {
      int  WGidY=int(gl_WorkGroupID.y);
        int  WGidX=int(gl_WorkGroupID.x);
      
      //  uint index=atomicAdd(Counter, 3);
        int offsetX=0, offsetY=0;
        offsetX=Size*WGidX;
        offsetY=Size*WGidY;
        int size=512;
        size=Size;
    //  uint counter=0;
        ivec2 pos=ivec2(0,0);
        int wsp=5;
        pos=ivec2(size/2,size/2);

        float h1, h2, h3, h4,h5;
        h1=0;
        h2=0;
        h3=0;
        h4=0;
        h5=0;
        if(Size==512)
        {
            h1=10;//rand(vec2(offsetX+0, offsetY+0));
            h3=10;//rand(vec2(offsetX+0, offsetY+size));
          //  h3=rand(vec2(offsetX+size, offsetY+size));
           // h4=rand(vec2(offsetX+size, offsetY+0));
        //SQUARE
        imageStore(HeightMap, ivec2(offsetX+0   ,offsetY+0),       vec4(float(offsetX+0)/wsp   ,   h1,float(offsetY+0)/wsp,   1));
        imageStore(HeightMap, ivec2(offsetX+0   ,offsetY+size),    vec4(float(offsetX+0)/wsp   ,   h2,float(offsetY+size)/wsp,1));
        imageStore(HeightMap, ivec2(offsetX+size,offsetY+size),    vec4(float(offsetX+size)/wsp,   h3,float(offsetY+size)/wsp,1));
        imageStore(HeightMap, ivec2(offsetX+size,offsetY+0),       vec4(float(offsetX+size)/wsp,   h4,float(offsetY+0)/wsp,   1));
        }
        /*
        wylicz y dla srodka ze wzoru
        */
        h5=(imageLoad(HeightMap, ivec2(offsetX+0, offsetY+0)).y+
            imageLoad(HeightMap, ivec2(offsetX+0, offsetY+size)).y+
            imageLoad(HeightMap, ivec2(offsetX+size, offsetY+size)).y+
            imageLoad(HeightMap, ivec2(offsetX+size, offsetY+0)).y)/4+rand(ivec2(offsetX+size/2, offsetY+size/2));
            if(size==512)
            {
                h5+=0;//10;
            }
       
        imageStore(HeightMap, ivec2(offsetX+size/2,offsetY+size/2),    vec4(float(offsetX+size/2)/wsp,h5,float(offsetY+size/2)/wsp,   1));
     


    }