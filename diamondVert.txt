#version 430 core

// Input vertex data, different for all executions of this shader.

layout(location = 3) in vec4 vertexPosition_modelspace;
layout(location = 2) in vec4 vertexNormal_modelspace;

layout(std430, binding = 4) buffer PerFrame
	{
		mat4 ViewMatrix;
	    vec4 CameraPosition;
	  	vec4 CameraForward;
	};

layout(std430, binding = 5) buffer Constant
	{
	  mat4 ProjectionMatrix;
	  vec2 screenSize;
	};


// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 LightPosition_worldspace;
out float col;


//uniform vec3 LightPosition_worldspace;


void main(){
 
 	LightPosition_worldspace=CameraPosition.xyz;
	gl_Position =ProjectionMatrix*ViewMatrix* vec4(vertexPosition_modelspace.xyz,1);
col=vertexPosition_modelspace.w;
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = vertexPosition_modelspace.xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	
	vec3 vertexPosition_cameraspace = ( ViewMatrix * vec4(vertexPosition_modelspace.xyz,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	
	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( ViewMatrix * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	// Normal of the the vertex, in camera space

	Normal_cameraspace = ( ViewMatrix *vec4(vertexNormal_modelspace.xyz,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	

	
}

